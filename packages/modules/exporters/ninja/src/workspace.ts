import { DOMNode, ExporterArguments, TextWriter, cartesianProduct } from "@conjure/core";
import { join } from "path";
import { Ninja } from "./utilities";
import { cppProject } from "./cppproject";

type PerWorkspace = (wks: DOMNode, args: ExporterArguments, writer: TextWriter) => void;

export const projectExporers: any = {
    'C': cppProject,
    'C++': cppProject,
};

function writeHeader(wks: DOMNode, _args: ExporterArguments, writer: TextWriter) {
    writer.write("# Generated by Conjure");
    writer.write(`# Workspace Build File for ${wks.getName()}`);
    writer.write('');
}

function writeProjects(wks: DOMNode, _args: ExporterArguments, writer: TextWriter) {
    writer.write('# Projects')
    const projects = wks.getAllNodes().filter(prj => prj.apiName === 'project');
    const tuples = cartesianProduct([wks.platforms || [], wks.configurations || []]);

    tuples.forEach(([platform, config]) => {
        projects.forEach(node => {
            const name = `${node.getName()}_${config}_${platform}.ninja`;
            const path = Ninja.pathToProject(wks, node, name);
            writer.write(`subninja ${Ninja.escape(path)}`);
        });
    });

    writer.write('');
}

function writeTargets(wks: DOMNode, _args: ExporterArguments, writer: TextWriter) {
    writer.write('# Build Targets');

    const tuples = cartesianProduct([wks.platforms || [], wks.configurations || []]);
    const projects = wks.getAllNodes().filter(prj => prj.apiName === 'project');

    tuples.forEach(([platform, config]) => {
        const key = `${config}_${platform}`;
        const deps = projects.map(prj => `${prj.getName()}_${key}`).join(' ');
        writer.write(`build ${key}: phony ${deps}`)
    });
    writer.write('');

    writer.write('# Build Groups');
    const groups = wks.getAllNodes().filter(node => node.apiName === 'group');
    tuples.forEach(([platform, config]) => {
        groups.forEach(group => {
            const key = `${group.getName()}_${config}_${platform}`;
            const deps = group.getAllNodes().filter(prj => prj.apiName === 'project').map(prj => `${prj.getName()}_${config}_${platform}`).join(' ');
            writer.write(`build ${key}: phony ${deps}`)
        });
    });

    writer.write('');
    writer.write('# Default Target')
    writer.write(`default ${wks.configurations[0]}_${wks.platforms[0]}`)
}

export const perWorkspaceFunctions: PerWorkspace[] = [
    writeHeader,
    writeProjects,
    writeTargets
];

export function workspace(wks: DOMNode, args: ExporterArguments) {
    const wksFileLocation = join(wks.location, `${wks.getName()}.ninja`);
    const file = new TextWriter(wksFileLocation);
    file.useSpaceIndent(2);

    perWorkspaceFunctions.forEach(fn => fn(wks, args, file));

    file.close();

    wks.getAllNodes().filter(prj => prj.apiName === 'project').forEach(prj => {
        const exporter = projectExporers[prj.language];
        if (exporter) {
            exporter(prj, args);
        }
    });
}