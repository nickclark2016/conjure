import { DOMNode, TextWriter } from "@conjure/core";
import { join } from "path";
import { fetchConfigName, fetchConfigNames, writeShell } from "./utils";

function writeHeader(node: DOMNode, file: TextWriter) {
    file.write(`# Makefile generated by Conjure for project ${node.getName()}`);
    file.write("");
}

function writePhonies(_: DOMNode, file: TextWriter) {
    file.write('.PHONY: clean');
    file.write("");
}

function writeSets(_: DOMNode, file: TextWriter) {
    file.write('# File Sets')
    file.write('GENERATED :=');
    file.write('OBJECTS :=');
    file.write("");
}

function writeFileRules(_: DOMNode, file: TextWriter) {
    file.write('# File Rules');
    file.write("");
}

function writeAll(_: DOMNode, file: TextWriter) {
    file.write('all:');
    file.write('\t@echo "Hello, World!"');
    file.write("");
}

function writeGlobals(_: DOMNode, file: TextWriter) {
    file.write('RESCOMP :=');
    file.write('DEFINES :=');
    file.write('INCLUDES :=');
    file.write('ALL_CPPFLAGS :=');
    file.write('ALL_CFLAGS :=');
    file.write('ALL_CXXFLAGS :=');
    file.write('ALL_RESFLAGS :=');
    file.write('ALL_LDFLAGS :=');
    file.write('LINKCMD :=');
    file.write("");
}

function writeConfigurations(prj: DOMNode, file: TextWriter) {
    const configurations = prj.getChildren().filter(cfg => cfg.apiName === 'when');

    for (let i = 0; i < configurations.length; ++i) {
        const cfg = configurations[i];
        const configName = fetchConfigName(cfg);

        if (i == 0) {
            file.write(`ifeq ($(config),${configName})`);
        } else {
            file.write(`else ifeq  ($(config),${configName})`)
        }

        cpp.perConfig.forEach(cb => cb(cfg, file));
    }
    
    file.write('endif');
    file.write("");
}

function writeConfigDefines(cfg: DOMNode, file: TextWriter) {
    const defines: string[] = cfg.defines || [];
    file.write(`DEFINES += ${defines.map(def => `-D${def}`).join(' ')}`);
}

function writeConfigIncludes(cfg: DOMNode, file: TextWriter) {
    const includes: string[] = cfg.includeDirs || [];
    file.write(`INCLUDES += ${includes.map(inc => `-I${inc}`).join(' ')}`);
}

export const cpp = {
    perConfig: [
        writeConfigDefines,
        writeConfigIncludes,
    ],
    perProject: [
        writeHeader,
        writeShell,
        writePhonies,
        writeGlobals,
        writeConfigurations,
        writeSets,
        writeFileRules,
        writeAll
    ]
};

export function cppProject(node: DOMNode) {
    const wksFileLocation = join(node.location, node.__makefile_name);
    node.__fileLocation = wksFileLocation;

    const file = new TextWriter(wksFileLocation);

    cpp.perProject.forEach(step => step(node, file));

    file.close();
}